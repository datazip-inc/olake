name: Integration Tests

on:
  push:
    branches:
      - "master"
    paths:
      - '**/*.go'
      - '**/*.java'
  pull_request:
    branches:
      - "*"
    paths:
      - '**/*.go'
      - '**/*.java'

env:
  MYSQL_ROOT_PASSWORD: root1234

# keep the runner you use in your infra; change to ubuntu-latest if you don't have a custom runner
defaults:
  run:
    shell: bash

jobs:
  # 1) Build and prepare artifacts once (cached)
  build-artifacts:
    runs-on: 32gb-runner
    outputs:
      artifact-path: ${{ steps.upload.outputs.artifact-path || '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.2'

      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Java (Maven)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Go Dependencies
        run: go mod download

      - name: Build Go (fast, using module cache)
        run: go build -v ./...

      - name: Build Iceberg Sink (Maven, parallel)
        working-directory: ./destination/iceberg/olake-iceberg-java-writer
        run: mvn -B -T 1C clean package -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-bin-and-jars
          path: |
            ./destination/iceberg/olake-iceberg-java-writer/target/*.jar
            ./ # (adjust if you produce binaries) 
        id: upload

  # 2) MySQL integration tests — only start mysql compose
  mysql-integration:
    needs: build-artifacts
    runs-on: 32gb-runner
    timeout-minutes: 12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore Go cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Start MySQL test container (only the mysql compose file)
        run: |
          docker compose -f ./drivers/mysql/docker-compose.yml up -d --wait

      - name: Wait for MySQL (quick checks)
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 24
          retry_wait_seconds: 5
          command: |
            docker exec olake_mysql-test mysqladmin -uroot -p${{ env.MYSQL_ROOT_PASSWORD }} ping

      - name: Run MySQL-only integration tests
        run: |
          # run only mysql packages to avoid waiting for other drivers
          go test -v ./drivers/mysql/internal/... -timeout 0 -run 'Integration' -p 3

      - name: Cleanup MySQL
        if: always()
        run: docker compose -f ./drivers/mysql/docker-compose.yml down

  # 3) PostgreSQL integration tests — only start postgres compose
  postgres-integration:
    needs: build-artifacts
    runs-on: 32gb-runner
    timeout-minutes: 12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore Go cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Start PostgreSQL test container
        run: |
          docker compose -f ./drivers/postgres/docker-compose.yml up -d --wait

      - name: Wait for PostgreSQL
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 24
          retry_wait_seconds: 5
          command: |
            docker exec olake_postgres-test pg_isready -U postgres -d postgres

      - name: Run Postgres-only integration tests
        run: |
          go test -v ./drivers/postgres/internal/... -timeout 0 -run 'Integration' -p 3

      - name: Cleanup Postgres
        if: always()
        run: docker compose -f ./drivers/postgres/docker-compose.yml down

  # 4) MongoDB integration tests
  mongodb-integration:
    needs: build-artifacts
    runs-on: 32gb-runner
    timeout-minutes: 12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore Go cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Start MongoDB test container
        run: |
          docker compose -f ./drivers/mongodb/docker-compose.yml up -d --wait

      - name: Wait for MongoDB
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 24
          retry_wait_seconds: 5
          command: |
            docker exec primary_mongo mongosh --eval "db.adminCommand('ping')" --quiet

      - name: Run MongoDB-only integration tests
        run: |
          go test -v ./drivers/mongodb/internal/... -timeout 0 -run 'Integration' -p 3

      - name: Cleanup MongoDB
        if: always()
        run: docker compose -f ./drivers/mongodb/docker-compose.yml down

  # 5) Iceberg / MinIO / Spark tests (only runs if you need the heavy local iceberg stack)
  iceberg-integration:
    needs: build-artifacts
    runs-on: 32gb-runner
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore Maven cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Start Iceberg local test stack (minio, mc, postgres, spark-iceberg)
        run: |
          # use --wait to let docker-compose wait for healthy if healthchecks are defined
          docker compose -f ./destination/iceberg/local-test/docker-compose.yml up -d --wait minio mc postgres spark-iceberg

      - name: Minimal data dir setup (only if necessary)
        run: |
          # Prefer docker volumes; avoid expensive host chown operations. Only create if tests require host mounts.
          echo "Skipping host chown by default. If you need host mounts, create them on your runner image."

      - name: Wait for services (minio, postgres)
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 60
          retry_wait_seconds: 5
          command: |
            docker exec minio mc alias set local http://localhost:9000 minio minio123 || true && \
            docker exec postgres_iceberg pg_isready -U postgres || true

      - name: Run Iceberg / Java integration tests (if any)
        run: |
          # Run any Java/Go tests that exercise the iceberg sink
          go test -v ./destination/iceberg/... -timeout 0 -run 'Integration' -p 3 || true
          # or run a short smoke test on the jar
          # java -jar ./destination/iceberg/olake-iceberg-java-writer/target/your-jar.jar --help

      - name: Cleanup Iceberg
        if: always()
        run: docker compose -f ./destination/iceberg/local-test/docker-compose.yml down
