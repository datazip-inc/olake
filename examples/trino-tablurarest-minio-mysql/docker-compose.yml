services:
  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    ports:
      - 8181:8181
    volumes:
      - catalog-data:/catalog
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_REGION: us-east-1
      CATALOG_WAREHOUSE: s3://warehouse/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://minio:9090
      CATALOG_URI: jdbc:postgresql://postgresql:5432/postgres
      CATALOG_JDBC_USER: temporal
      CATALOG_JDBC_PASSWORD: temporal
    networks:
      - olake-network
    depends_on:
      mc:
        condition: service_completed_successfully
    restart: unless-stopped

  minio:
    image: minio/minio
    hostname: minio
    container_name: minio
    ports:
      - 9090:9090  # server address
      - 8443:9091  # console address
    volumes:
      - minio-data:/data
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_DOMAIN: minio
    command: server --address ":9090" --console-address ":9091" /data
    networks:
      olake-network:
        aliases:
          - warehouse.minio
    restart: unless-stopped

  mc:
    image: minio/mc
    container_name: mc
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_REGION: us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9090 minio minio123) do echo '...waiting...' && sleep 1; done;
      echo 'Ensuring warehouse bucket exists and is public...';
      if /usr/bin/mc stat minio/warehouse > /dev/null 2>&1; then
        echo 'Warehouse bucket exists, removing for fresh start...';
        /usr/bin/mc rm -r --force minio/warehouse || echo 'Failed to remove warehouse, proceeding...';
      fi;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc anonymous set public minio/warehouse;
      echo 'Minio warehouse bucket setup complete.';
      "
    networks:
      - olake-network
    depends_on:
      - minio
    restart: "no"

  primary_mysql:
    container_name: primary_mysql
    image: mysql:8.0
    hostname: primary_mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: main
    command:
      - "--server-id=1"
      - "--log-bin=mysql-bin"
      - "--binlog-format=ROW"
      - "--gtid-mode=ON"
      - "--enforce-gtid-consistency=ON"
      - "--local-infile=1"
      - "--binlog_expire_logs_seconds=604800"
      - "--skip-host-cache"
      - "--skip-name-resolve"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - olake-network
    healthcheck:
      test: [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-ppassword",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  init-mysql-tasks:
    image: ubuntu/mysql:8.0-22.04_edge
    container_name: init-mysql-tasks
    entrypoint: >
      bash -c "
        set -e;

        export DEBIAN_FRONTEND=noninteractive;
        echo 'Updating package list and installing curl...';
        apt-get update -qq && apt-get install -y curl;

        echo 'Waiting for MySQL to be ready...';
        until mysqladmin ping -h primary_mysql -P 3306 -u root -ppassword --silent; do
          sleep 2;
        done

        # Create CDC user
        mysql -h primary_mysql -P 3306 -u root -ppassword -e \"
          CREATE USER IF NOT EXISTS 'cdc_user'@'%' IDENTIFIED BY 'cdc_password';
          GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'cdc_user'@'%';
          FLUSH PRIVILEGES;
        \";

        mysql -h primary_mysql -P 3306 -u root -ppassword -e \"SET GLOBAL binlog_row_metadata = 'FULL';\";

        # Load weather data
        curl -SLJk -o /tmp/weather.csv https://corgis-edu.github.io/corgis/datasets/csv/weather/weather.csv;
        mysql -h primary_mysql -u root -ppassword -e \"CREATE DATABASE IF NOT EXISTS weather;\";
        mysql -h primary_mysql -u root -ppassword weather -e \"CREATE TABLE IF NOT EXISTS weather (id INT AUTO_INCREMENT PRIMARY KEY, precipitation FLOAT, date_full VARCHAR(20), date_month INT, date_week_of INT, date_year INT, station_city VARCHAR(100), station_code VARCHAR(10), station_location VARCHAR(100), station_state VARCHAR(50), temperature_avg FLOAT, temperature_max FLOAT, temperature_min FLOAT, wind_direction INT, wind_speed FLOAT);\";
        mysql --local-infile=1 -h primary_mysql -u root -ppassword weather -e \"LOAD DATA LOCAL INFILE '/tmp/weather.csv' INTO TABLE weather FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' IGNORE 1 ROWS (precipitation, date_full, date_month, date_week_of, date_year, station_city, station_code, station_location, station_state, temperature_avg, temperature_max, temperature_min, wind_direction, wind_speed);\";
        
        echo 'Weather database loading complete.';
      "
    restart: "no"
    volumes:
      - mysql-data:/var/lib/mysql
    depends_on:
      primary_mysql:
        condition: service_healthy
    networks:
      - olake-network

  trino:
    image: trinodb/trino:latest
    container_name: olake-trino-coordinator
    ports:
      - "8088:8080"
    volumes:
      - ./etc:/etc/trino:ro
      - ./trino-data:/var/lib/trino
    networks:
      - olake-network
    depends_on:
      - rest
      - minio
    restart: unless-stopped

  sqlpad:
    image: sqlpad/sqlpad:latest
    container_name: sqlpad-trino
    ports:
      - "3000:3000"
    environment:
      SQLPAD_ADMIN: 'admin'
      SQLPAD_ADMIN_PASSWORD: 'password'
      SQLPAD_CONNECTIONS__olake__name: OLake Demo
      SQLPAD_CONNECTIONS__olake__driver: trino
      SQLPAD_CONNECTIONS__olake__host: host.docker.internal
      SQLPAD_CONNECTIONS__olake__port: 8088
      SQLPAD_CONNECTIONS__olake__username: admin
      SQLPAD_CONNECTIONS__olake__catalog: iceberg
      SQLPAD_CONNECTIONS__olake__schema: weather
    networks:
      - olake-network
    depends_on:
      - trino
    restart: unless-stopped

volumes:
  minio-data:
  mysql-data:
  catalog-data:
  trino-data:

networks:
  olake-network:
    external: true
