syntax = "proto3";

package io.debezium.server.iceberg.rpc;

service RecordIngestService {
  rpc SendRecords(IcebergPayload) returns (RecordIngestResponse);
}

message IcebergPayload {
  enum PayloadType {
    RECORDS = 0;
    COMMIT = 1;
    EVOLVE_SCHEMA = 2;
    DROP_TABLE = 3;
    GET_OR_CREATE_TABLE = 4;
    REFRESH_TABLE_SCHEMA = 5;
    REGISTER = 6;
    GET_FIELD_ID = 7;
    UPLOAD_FILE = 8;
    GENERATE_FILENAME = 9;
  }
  
  PayloadType type = 1;

  message FileMetadata {
    string file_type = 1;  
    string file_path = 2;
  }

  message FileUploadRequest {
    bytes file_data = 1;
    string file_type = 2;  
    string partition_key = 3;  
    string filename = 4;
    int32 equality_field_id = 5; 
  }

  message Metadata {
    string dest_table_name = 1;
    string thread_id = 2;
    optional string identifier_field = 3;
    repeated SchemaField schema = 4;
    repeated string file_paths = 5; 
    repeated FileMetadata file_metadata = 7;
    optional string field_name = 6;
    optional FileUploadRequest file_upload = 8;
  }

  message SchemaField {
    string ice_type = 1;
    string key = 2;
  }

  // OPTIMIZED: Replace google.protobuf.Value with typed fields
  message IceRecord {
    // Use oneof for efficient memory usage - only one field type active per record field
    message FieldValue {
      oneof value {
        string string_value = 1;
        int32 int_value = 2;
        int64 long_value = 3;
        float float_value = 4;
        double double_value = 5;
        bool bool_value = 6;
        bytes bytes_value = 7;
      }
    }
    
    repeated FieldValue fields = 1;
    string record_type = 2;  // "u", "c", "r"
  }

  Metadata metadata = 2;
  repeated IceRecord records = 3;
}

message RecordIngestResponse {
  string result = 1;
  bool success = 2;  // Adding success boolean for better error handling
  optional string filename = 3; 
}
